-------------------------------------------------------------------------------------------------------------
Here, the subtitles for talk Electronic bank robberies are supposed to be created  
  
Link and further information can be found here: 
  
The language is supposed to be: 
[ ] German 
[x] English  
(the orignal talk-language)
-------------------------------------------------------------------------------------------------------------

Are we on? Okay, well.

Welcome to our little talk here and thanks for the introduction. 

Well, as the angel said, it guess everybody knows, what an ATM is. It's basically used by people to dispense money from their accounts. Either they live in countries like this one, where you usually don't use credit cards to pay or because you don't wanna be tracked, right.

We're gonna tell a little war story here, and that's a case of ATM hacking, 
a real life, real world incident, that occured this year. You're want to remember this number here, because that's, how you enable the hacked system in case it's infected. And I'm gonna hand over to my co-speaker here, to tell you about the first few things here.

Let's just have a quick look on what we have in a cash machine. 
of course we have a safe, that's where we want to get in, there's the money in.

Of course we have a normal computer, it's like a desktop computer. 
Most likely it's running Windows XP. 

this was the user interface of his malware

it was quite alike but not as nice

Has anybody in this room looked at this 


ofcourse we had a lot of POS malware, ofcouse from mobile terminals to steal mobi

we had alot of look at ploutus 2 it's similar but notas advanced

whya re we standing here talking about this case, we had an incident a bank that noticed that they had alot of empty teller machines, they investiigated with limited success and improved the monitoring

they discovered that the infection vector was through usb sticks. They arrested hte guy and end we examined the usb stick.

to riitereate: they arrested a guy trying to cash out with a usb thumb drive, and thats where we started our analysis..

it's pvc

they forced the atm to reboot from the usb device, on the usb was a standard windows boot cd, and they put some custom exe's on there that started at boot and KATCHIING

the malware waa  bat script called hack.bat

initially we thought this was a fake drive to throw us off...

what we found then besides the boot code was some very interesting files copied off the atm's, the data copied from the atm's was system data like software hive keys, cached data, cc data, payment data, from each of the infected teller machines. We also found the atm.exe file which was very interesting. the hack.bat script was very impressive with many cli switches. Checks if it's already hacked or needs to be hacked. the most used swith is ofcourse "--hack". you can also copy data from teh atm, clear logs, etc.

It also has functionality to cover your tracks, clearing all files off the atm and hiding all tracks.

Now that we know how the system gets infected we were curious how the actual cashout process works. we reversed the atm.exe file to find out how it worked. atm.exe is a ups exe packed thing. 

we came accross some interesting things when we loadeded it into ida pro, we loaded it into ida pro and discovered that the original executable, and if you're a little bit familiar with the ps format on windows you'll now that you can store some extra ressources on the side.

the ressource is encrypted with xor

we figured that every exe on an atm is encrypted with the volume serial number. each exe only runs on a sinlg e atm

so how do they get the disk id in the first place, the volume serial, there are only two options, 1) the go to the atm and extract the volume serial, create the malware and come back, or 2) insode job

onthe right you see some code that runs after decrytpion, the first basic code checks if the first byte is en m and the second is a z, part of the pe file header, and that's how we recovered the actual code. so we reverted the encrytpion and recovered the dll. 

checksium yada uada

malicious dll is dropped into a path in the system directory, part of the path is generated from the disk volume id also. we came across something else: the malware wreites a  log file and stores it on the usb drive. 

it's a verbose output log, and contains information about three other infections that took place. with that information we can see that at least 4 atm's were infected with this usb key.

all htese atm's run win xp.

what is interesting here is that we have information about three other atm's infected in cleartext, and also in the log file. why did they not remove the log file?, they could have cleared their logs, why didn't they?

now we'll talk more about the aÄ‡tual payloda. here is a list of some facts we discovered. the ressources contained some pictures to show on the screen.

the key also included sdelte form sysinternals to clean up after themselves.

they put laot of effort into hiding their tracks. we'll give a demo in a minute

for most malware it's iportant to become persistent, you want your malware to reload again. these giuys do this by writing the app.dll into the windows registry, so you can load your dll into every process loaded into the current session.

as you can see there are several

basically whats happening is that the dll chekcs the name of the process it's running in, and in this way include support for different cash clients.

the dll is also loaded into sys...

if you want to uninstall the software the fact that the code is loaded into this application can clean up after itself.

in the first infections we found the dll in a specific place in the registry.

later in the development cycle they only loaded it into cashclient, so we had to search deeper in the registry to find it...

what we found out by reversing the code is that the dll runing in the cashclient intercepts the keypad events, and by tyoing a specific code you can enter a special menu

in the first menu you get a challenge that you have to respond to to get the cashola...

as they don't want to transfer hte knowledge of how to cash out to the first line person gettin gthe money, the person gettin gthe money needs to make a phone call to get the response.

the bank that was targetted doesn't want us to disclose the detials, so we can't show you the video.

the worst thing that can happen is if someone recovers the challenge response logic, so this code is well protected.

there are several critical components that are protected. you will not find direct function calls to the cashout code, so if you don't want to disclose that function a calls function b, you need to put something in between.

the state macine computes the address to call.

the state machine also protects the challenge response code. there is alot of garbage in the code, basically nop'ing with junk code, or spaghetti code, calling subroutines all over the place.

we spent severl days or weeks trying to figure out how this works. the colored bar is an output from ida pro. the blue stuff is malware code, green is library functions, and at the far end is the state machine. and we can put a memory break point on the memory. so basically we can treat the state machine as black box and still find out how the malware worked..

demo time

we wnat to demo how it works n a virtual machine. when you enter the scret code, the screens you saw earlier on the slides is that the screens are dispkayed on a a second desktop, and the display is swithed over to the secret menu desktop, leaving the original atm application running in its own desktop..


we made some patches to make it more conventient to demo and that's what we'l demo now

we'll start two processes here, one simulating the malware running in the lsys process and one in the cash client.

what we'll do now is enter the 12 digit secret code from the first slide..

if you do that you're presented with this menu here and...

the only thing hardcoded is the 

every payment transactio is loaded into log files and the malware gets the amount of money on the screen, just the 100 bills, all of them, we took this screen from an attacked atm, only the $100 cassette was cashed out completely.

you can imagine that it takes a lot of time to cash out a whole cassette, therefor only cashin g  out the most valuable cassette

if i press 1 i get the challenge code and i must enter the response...

i'm missing the actual cash to make a better demo ;=)

usually what happens is you press 1, you get hte challengem you call hq, type response, get second level menu that allows you to caash out, we can't do that here, so we simulate that we enter the right code.

we patched the timer so when the 3 minute timeout triggers the second level screen is displayed. they have a professional development cycle. improve anti forensics, build in more functionality, you can really track the changes and improvements over time.

the cahllenge code is generated from two things: an id that is unique to the atm and a random value. the guy can't reuse the code on another atm, he has to call home.

now would be a good time for the timer to fire.

the dropper xecutable

this screen is what we showed ont eh second slide. it says the machine is out of order.

this screen tells you to enter another code to enter the second hidden menu, after entering the 12 digit code again

my  vm can't cash out the money unfortunately...

this is where the malware interacts with the cashclient, calls the dll to trigger the cash out functionality

before you cash out you disable the network adapters on the atm to drop direct bank monitoring.

finally you can also fomat the system, if you press 9

it doesn't actually format the system, just uninstalls the malware. and also you can't get out of this menu again.

we want to conclude woth some speculation about the people working on this.

what we can tell is that they want to make serious money they have a big team, thay hve different roles, that have only their part.

profound knowledge of the atm's, so they most likely had one to test on.

either they broke one and reversed it, or they most likely had someone on the inside who had developed the original cash client. how it's possible to trigger a cash out, circumventing all the safety measured in place.

the code is noce and sorted, they implement new features over time. they are capable of protecting the code against people like us. they made it really hard to get the poievces together to get a ful image of how it all works together...

next time you

Ã¥please everyone with a question lime up at the microphones...




look at blaut? is written in .NET but not as advanced

Why we are standing here talking about this case?
We had an incident about a lot of empty cash machines. The bank improved the monitoring and started to. 
What they did is they figured out that something was wrong with their ATMs.  They plugged in a USB devce and forced the ATM to reboot and it rebooted from the USB device which was a boot cd . 
Within this custom section we found our malware. "hack.bat"
They just wanted us to exam the wrong file. 
It's just a mini xp containing the hack.bat in autostart. 
There were 3 different we found there. 
Of course we have found the atm exe. 
We have a quick look at the hack.bat.
The most used one is of course -hack. This is the part where he is copying stuff from the atm. 
You can clear all files of the.
Of course we were curious how the actual cashout process works. We reverse engineered the executable. 
First of all the exe is acked with UPX and we loaded it up into IDA pro. 
THis binary had resource which contains the actual .
Every executable thats deployed is tailored specifically to the individual ATM. 
They go to the ATM and extract the information from the ATM, go home and prepare the malware and then come back to infect the ATM. 
We figure that this is an executable and reverted the XOR encryption and recovered the dll. 
So after we recovered the malicious dll we looked at the filename and it's linked to the ATM it's made for (the volume ID). 
It writes a verbose logfile. 
We could see that 3 other ATMs were infected with this USB device. 
In this part we want to talk about the actual payload. The interesting things. 
Again the file contains some encrypted resources. They contained images to display on the ATM screen. Another thing that was in there was the sdelete tool from Sysinternals to remove forensic traces. But they have some fallback to hide their traces on the system. 
These guys do that by writing the AppInit_DLLs into the registry. 
What you see down there is some decompiled sourcecode. 
If some other checks succeed run some other function. 
They implement support for some different cash clients. 
It it's running with this it's not interacting with the cash client. 
What was also quite interesting here is that they started having a professional development cycle. 
The improved it and later on added this dll so you have to search quite deeper. 
So we know how the malware becomes persistent. Of course we want to know how to interact with it. 
It installs a hook on the keyboard. They process only number keys and if you enter the 12 digit code it allows you to control the ATM. 
You can see on this video that he calls somebody and types some other number to start cashing out. They don't leave anything to chance. We tried to bring you this video but the bank didn't want that. 
They anticipated someone to disassemble the code. There are several critical pieces. I'm gonna talk about how they do that. 
We call it a state machine. They do control flow obfuscation. They implemented a state machine that consumes a buffer and the result is the address of the function to call. 
That's only one scenario. You can see there is a lot of junk in there. 
We spent several days. You can see the blue stuff at the front that is the code. The green stuff is the library. 
By doing this you can treat it as a black box. 
Unfortunately we couldn't use this break point method. 
Now we want to demo to you how this looks like. We have an infected virtual machine that is patched.
That's a little difficult to debug. 
I wanna start two processes here. The other one is simulating the malware in the cash client. 
If you do that you are presented with this menu here. The only thing what is hard coded are the three lines. Every payment transaction is loaded and pulls the value into that screen. 
So this is why they most likely cashed out this casset with the most valuable bills. 
Now it's challenging me with this code. 
Let me restart this. There we go again. Usually what happens is you press one, you get the question, you answer and you cash out. So we have to simulate that 
They implemented a timeout that fires after 3 minutes. 
They have really a development cycle. They collect all the facts they have and improve on it. 
This challenge code is generated from two things. An ID that is unique to the ATM and a random value. So the guy has in fact call you to get the money. 
I have another story. When something is wrong there is an error number that is derived from 1337. 
The first 4 lines display the amount of bills for the different notes.
You can pay attention to the purple line. Now it says failed. 
This is where the malware actually interacts with the cash client. But the other options are also interacting with the ATM. So probably you want to disable the network entirely. Finally you can also format the system. It just uninstalls the system. So unless you enter the right code in here you locked yourself out. 
Obviously we don't know who this is. 
They put a lot of serious effort implementing this and seperated different roles. For sure they have a lot of knowledge about the ATMs. Either they reverse engineered the original cash client or there is someone from the inside. They have quite good development skills. They implement new features likethe APP INIT and they protect their code agains people like us. 
That was almost the last slide. If it is hacked you enter this number that uninstalls the malware. 
FAQ:
No the do not have an internet connection. 
That depends on the USB Port on the back. They just repaired it afterwards. 
Is the the state of security in ATMs or is it just a really bad model. 
The teller machines are all the same but every bank has their own cash client. 
I also mean the physical security. 
Actually this has been fixed that prevents this way of attack. But it's kind of state of the art. 




was conducted via a USB stick. and they managed to arrest at guy where we found this malware
thy improved their surveillaeance thecnonogies

they broke a small part of the chassis. forced the ATM to reboot from the USB device. Just found an ingae of ? boot cd with a

founrd malware hack.bat

what we interesting files copied from the compromised teller machins. Very interesting data copied. Creditcard data, from the teller machines. took at quick look at the hack.bat script. veey interesting wsitches. checks if system is alreaeady hacked. moset usefull one is "hack". One where he copies really intertesting information from teller. One covers his trackes by clearing all data. 
We wewre curious. Knew how machine was infected. How do you get money out of the thing. Revovered func from exe. 
UPX packe ,file. Can be unpacke to original code again. Into analasis tools. Perl. disk assemlbers. Looked at code. exe contains resoutrces in PE format. Encrupted data in DLL. XOR encryption. Very weak. Every EXE that is deployed with VLC. Tailored for every ATM. Exe can oly run on one ATM. How do they get volume Se.rials from to target each machine?
Exratc from machine and come back with custom intaller?
Other options are upt o your imagination.
Some code is shown after XRO decryption. Checks for "MZ". Is probably executable. Recovered DLL by reversing XOR. Ran checksumming code to check if valid DLL.
After DLL revoery took closer look. Can see wich ATM fiel is meant to run on. Can then determine which ATM are tageted. This malware wites .lock file. Log file contains information about other infections. Can see that 4 infections were performed. Machines copromised were windows XP. information about 3 different teller machines. Why does the USB stick have information from severeal hacks? 
Payload:
Talck about payload: the interesting bit: DLL contaios resources (enc)
contained images toi be displayed on the ATMs. sdelete tool from sysinternals. Can remove forensic artefacts fomr instalation. Backup stuff in malware to cover tracks. Will give demo of process on how to interact with infecced ATM.
Must be persisten on system across reboots. Writes to AppInit_DLLs: Will cause malware to be loaded into ram. Talks about how malware works. Talks more about how exploit code works and cleans up traces.
Very professionaly written. Can see different developmant cycles in malware versions. Improved the malicious DLL. Harder to find later versions.
We know hoe malware becomes persistent. How it incects itselt into processes. How do we interact with it? Hooks into keybord events. trapped by malware. Olnly numberkeys. 12 digits starts malware (sectert code)
Challenge response scheme to make sure not activated by acciident. Poor guy is sent to cash out. Not brains behind operation. Cashout guy has to call mastermind and get code to get machine to cash out. When and who does cashout is moniteded. No trust.
Was anticipated malware would be reverse engineeried. Does not want hacked aTMS from being jackpotted by unauthorised people. Non obvious calls in code to avoid easy reverse engineering. State machine obfuscated control flow in code. Do not want control code to be obvious. State machine computes address to call. Lots of junk code. Polymophism. One method of obfuscation. Severeal layers of oobsucation. Spent weeks reversengeering . Map showing code, data and statemachine. Set traps to get calls to state machine. Treat state machine as black box. Reeconsrtuct calling structure. 
Demo:
Do not have ATM. Have VM running malware. Patched malware a bit. Screens swon on seperate desktop. Difficult to debug. had to pach code for demo. 
XP VM. 2 processes started. one simulates malware on cash client. Now entering 12 digit code. Menu pop up. ATMs generate a lot of log files. Every payment ransaction loaded. Attacker is presente with actual value of amount of money. Got screen from atm that was attacked. Takes tome to cash out large amounts of money. Most likely why the olny cash out large bills.
ATM shows standard screen again. Shows challenge response. 6 digits, cannot really simulate actual attack. Some pieces are missing. REstarts VM. 
You press 1, get challenge code, call HQ and get code to cash out. Cannout so this. Simulate successfull response. Timer removes hacked window after 3 minutes. Pacech version so that resonse screen i shown after 3 mintes.
Have improved for everey attack. improved anti forencis. Can tesck developmant changes.
Cahllenge code genereated from 2 things: id unique to ATM + random value.
Same random value different for 2 different machines. 
Dropper exec. Error code is derives 1337. funny.
Timer fires. Shows response screen. Screen show message that means you can enter 12 digit number to actuall contol the ATM. 1. dispense 300 R bills. Emulator cannot dipence bills. Malware interacts with cash client. Other interesintg functions: ATM have persisten connection to bancks. 7 and 8 can disable connections ( network adapters).
Can format system. press 5 shows image with guy fawkes mask. 
System is not formatted. Malware is removed. Out of order screen is shaown again if incorrect code is shaown.

Conclusion: Speculation about peopla behind malware. Sombody want s to make serious money. Serious effort put into malware. Distinct roels, very seperated. Know ATM very well, must have been able verfy SW agaounst actual ATM. Problaby had sombody on the inside. that know how to circumnvent all the security measures. Good development skills. Well structured code. Impemented naw features. Well protected code. very hard to reverese engineer. 
next time try to to enter twelve digit code or enter long number .

Q1: 

Q2: can you use internat connction? 
A2: does not have internte connection. 

No use in keeping vuls secret. Should be talked about in the open.

q: Wha was access to machinw obtoinde?
A: Physivally opended ATM to access usb port.

q: Why would anybody use XP for banking?
Whe doen no one relaise there is a hole in the ATM?
A: Exact hole that was repaired afterwards:
100.000 ATM for eat bank. Banks are starting to renew ATM SW. 

Q: Is the the current state of the art in AMT or really bad model?
A: Every back has theit own ATM SW and HW. This exploit has been fixed. Not only teller machines. Is sort of the current state of the art'

Applause





from the system, then go home and infect the system.
The other option is .. well we leave that to your imagination.
the second byte is a B it is part of the PE header.

After thi happened, the dropper runs some checksum code that verifies that 
its dropped into this path right there .. because of this name and scheme. This sample was supposed to run on this atm.
look at this again ... there is file name up there ... we switch to the next slide.
We have information that these guys infecteded at least 4 machines- All these atm's run in fact Windows XP.
Now in this part we want to talk about the actual payload ... the interesting bit. What u can see here is a list of .. .
By looking at this code we can eas. 
Another thing that was in here .. 
show you the whole process .. see the toher screens as well.
When it reboots you want the malware to reload again. These guys .. value into the Windows registry.
What u see down there is the decompiled source code.
The DLL checks the name of the process it is running in ... this line down here ... some Windows process. If you wanna uninstall a software your create a .
Within the first infections we could find the 
You have to search a lot deeper.
We know how the malware becomes persistant, who.
to control the ATM. 
They implemented a challange response game.
Maybe u can tell the story about the phone calls.
And after that he just took his cell phone, ... right after that he starts cashing this ...
You have to trust us this is the way they do that.
understand how it works. Thats not the only part that is protected.
Everthing that interact with the cash client.
to find the rights word for that
u want to compute a certain value ... state machines with its functions ...  

shows you. the blue part in the front. green stuff here is library functions
u can still inspect memory and still 
want to demo to your how this looks like.
when u done you can switch back.
One is the one which simulates the malwareu remember that right.
every payment transaction is noted.
so the attack is presented with the actual amount of money.
there u can see that only the 100$ was cashed out.
So what i can do now is to press ... or i press now ... and now it challenge me with a 6 
let me restart this, yeah restart this. there we go again. usually what happens: you press 1.

Then u have access to this second level menu.
talk a little bit more.this challenge code is generated by 2 parts. if which is uniqe to the atm machine. Now would be a good time for the 
ok. so this screen is like what we showed on
first 4 lines show you
u c an cash out
that would be nice.u can see the adapters are disabled.

your can disable and enable the adaptersunless your enter the right code here u locked your self out.
There are some interesting facts. What we can tell for sure is .
How it is possible to trigger a cash out without a valid card.
They made it really hard to get the piecs together.
your guys remeber the 12 

For sure they have profound knowledge of the systems.





slide: decrypting the payload

closer look at taht one .. if you come across of one of the dlls its is linked to 











